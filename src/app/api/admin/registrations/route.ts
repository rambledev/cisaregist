import { NextResponse, NextRequest } from 'next/server'
import { prisma } from '@/lib/prisma'
import { verifyAdminToken } from '@/lib/auth'
import { encryptNationalId, decryptNationalId } from '@/lib/encryption'

// ===============================
// üîπ GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ===============================
export async function GET(request: NextRequest) {
  try {
    const admin = await verifyAdminToken(request)
    if (!admin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const registrations = await prisma.registration.findMany({
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        sequence: true,
        firstNameTh: true,
        lastNameTh: true,
        firstNameEn: true,
        lastNameEn: true,
        email: true,
        phoneNumber: true,
        faculty: true,
        department: true,
        academicPosition: true,
        administrativePosition: true,
        nationalId: true,
        prefix: true,
        role: true,
        status: true,
        createdAt: true,
        updatedAt: true,
      },
    })

    // üîç ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ (‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
    const decryptedData = registrations.map((item) => {
      const rawValue = item.nationalId || ''
      let decryptedValue = rawValue

      try {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ":" ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        if (rawValue.includes(':')) {
          decryptedValue = decryptNationalId(rawValue)
          console.log(`üîì Decrypted nationalId (${item.id}):`, decryptedValue)
        } else {
          console.log(`‚ö†Ô∏è Plain nationalId (${item.id}):`, decryptedValue)
        }
      } catch (error) {
        console.error(`‚ùå Failed to decrypt nationalId (${item.id}):`, rawValue)
        decryptedValue = '[DECRYPTION_FAILED]'
      }

      return {
        ...item,
        nationalId: decryptedValue, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏ï‡πá‡∏° 13 ‡∏´‡∏•‡∏±‡∏Å
      }
    })

    return NextResponse.json({ registrations: decryptedData })
  } catch (error) {
    console.error('GET registrations error:', error)
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    )
  }
}

// ===============================
// üîπ POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
// ===============================
export async function POST(request: NextRequest) {
  try {
    const admin = await verifyAdminToken(request)
    if (!admin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const {
      firstNameTh,
      lastNameTh,
      firstNameEn,
      lastNameEn,
      email,
      phoneNumber,
      faculty,
      role,
      department,
      academicPosition,
      administrativePosition,
      nationalId,
      prefix,
    } = body

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥
    const existingEmail = await prisma.registration.findUnique({ where: { email } })
    if (existingEmail) {
      return NextResponse.json({ error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' }, { status: 400 })
    }

    // üîπ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const encryptedNationalId = encryptNationalId(nationalId)

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ã‡πâ‡∏≥ (‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™)
    const existingAll = await prisma.registration.findMany()
    const duplicated = existingAll.find((r) => {
      try {
        const plainId = r.nationalId.includes(':')
          ? decryptNationalId(r.nationalId)
          : r.nationalId
        return plainId === nationalId
      } catch {
        return false
      }
    })

    if (duplicated) {
      return NextResponse.json(
        { error: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' },
        { status: 400 }
      )
    }

    // üîπ ‡∏´‡∏≤ sequence ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const lastRegistration = await prisma.registration.findFirst({
      orderBy: { sequence: 'desc' },
      select: { sequence: true },
    })
    const nextSequence = (lastRegistration?.sequence || 0) + 1

    // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const registration = await prisma.registration.create({
      data: {
        sequence: nextSequence,
        firstNameTh,
        lastNameTh,
        firstNameEn,
        lastNameEn,
        email,
        phoneNumber,
        faculty,
        role,
        department,
        academicPosition,
        administrativePosition: administrativePosition || null,
        nationalId: encryptedNationalId, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        prefix,
      },
    })

    return NextResponse.json({
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      registration,
    })
  } catch (error) {
    console.error('POST registration error:', error)
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    )
  }
}
