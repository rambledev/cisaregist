import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import jwt from 'jsonwebtoken'

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production'

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  console.log('üîç Middleware called for:', pathname)

  // ‚úÖ ‡πÉ‡∏´‡πâ API routes ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  if (pathname.startsWith('/api/')) {
    console.log('‚úÖ API route detected, allowing to pass through')
    return NextResponse.next()
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  if (pathname === '/admin/login') {
    console.log('‚úÖ Login page, allowing access')
    return NextResponse.next()
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô path ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ /admin (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô /admin/login)
  if (pathname.startsWith('/admin')) {
    console.log('üîê Admin route detected, checking authentication')
    
    const token = request.cookies.get('admin-token')?.value
    console.log('üç™ Token exists:', !!token)

    if (!token) {
      console.log('‚ùå No token found, redirecting to login')
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ login
      const loginUrl = new URL('/admin/login', request.url)
      return NextResponse.redirect(loginUrl)
    }

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
      const decoded = jwt.verify(token, JWT_SECRET)
      console.log('‚úÖ Token verified successfully')
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô /admin ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ /admin/dashboard
      if (pathname === '/admin') {
        console.log('üîÑ Redirecting /admin to /admin/dashboard')
        const dashboardUrl = new URL('/admin/dashboard', request.url)
        return NextResponse.redirect(dashboardUrl)
      }

      // token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
      console.log('‚úÖ Authentication successful, allowing access')
      return NextResponse.next()
    } catch (error) {
      console.log('‚ùå Token verification failed:', error)
      // token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ login
      const loginUrl = new URL('/admin/login', request.url)
      const response = NextResponse.redirect(loginUrl)
      response.cookies.delete('admin-token')
      return response
    }
  }

  console.log('‚úÖ Non-admin route, allowing to pass through')
  return NextResponse.next()
}

export const config = {
  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö matcher ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° API routes
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
    // Only apply to /admin routes
    '/admin/:path*'
  ]
}